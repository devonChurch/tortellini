name: $(Build.SourceBranchName)-$(BuildID)

trigger: none

pool:
  vmImage: "ubuntu-latest"

variables:
  NVM_VERSION: '12'

stages:
  - stage: buildApplication
    displayName: "Build application"
    jobs:
      - job: buildApplication

        steps:

          - script: echo $(cat .nvmrc)
            displayName: "What is our current NVM version"

          - bash: echo '##vso[task.setvariable variable=NVM_VERSION]'$(cat .nvmrc)
            displayName: "Extract/set NVM version"

          - script: echo $(NVM_VERSION)
            displayName: "What is NVM_VERSION"

          - task: NodeTool@0
            inputs:
              versionSpec: $(NVM_VERSION)
            displayName: "Install Node.js"

          # Emulate `npm ci` as closely as possible with yarn.
          # @see https://classic.yarnpkg.com/en/docs/cli/install/#toc-yarn-install-frozen-lockfile
          - script: yarn install --frozen-lockfile
            displayName: "Install Node.js dependencies"

          - script: yarn build:production
            displayName: "Build application"
            env:
              BRANCH_NAME_FULL: $(Build.SourceBranch)

          - publish: $(System.DefaultWorkingDirectory)/dist
            artifact: dist_build_artifact
            displayName: "Publish application"

  - stage: deployTest
    displayName: "Deploy to Test"
    jobs:
      - deployment: deployTest
        environment: "tortellini-test"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: dist_build_artifact

                - script: |
                    cd $(Pipeline.Workspace)/dist_build_artifact
                    export BUILD_NAME=$(ls)
                    aws s3 sync ./$BUILD_NAME s3://$AWS_BUCKET/$BUILD_NAME --delete
                    aws s3 cp s3://$AWS_BUCKET/env.config.json s3://$AWS_BUCKET/$BUILD_NAME/env.config.json
                  displayName: "Sync with AWS bucket"
                  env:
                    AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
                    AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
                    AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)
                    AWS_BUCKET: $(AWS_BUCKET_TEST)

  - stage: deployStage
    displayName: "Deploy to Staging"
    jobs:
      - deployment: deployStage
        environment: "tortellini-staging"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: dist_build_artifact

                - script: |
                    cd $(Pipeline.Workspace)/dist_build_artifact
                    export BUILD_NAME=$(ls)
                    aws s3 sync ./$BUILD_NAME s3://$AWS_BUCKET/$BUILD_NAME --delete
                    aws s3 cp s3://$AWS_BUCKET/env.config.json s3://$AWS_BUCKET/$BUILD_NAME/env.config.json
                  displayName: "Sync with AWS bucket"
                  env:
                    AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
                    AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
                    AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)
                    AWS_BUCKET: $(AWS_BUCKET_STAGING)

  - stage: deployProduction
    displayName: "Deploy to Production"
    jobs:
      - deployment: deployProduction
        environment: "tortellini-production"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: dist_build_artifact

                - script: |
                    cd $(Pipeline.Workspace)/dist_build_artifact
                    export BUILD_NAME=$(ls)
                    aws s3 sync ./$BUILD_NAME s3://$AWS_BUCKET/$BUILD_NAME --delete
                    aws s3 cp s3://$AWS_BUCKET/env.config.json s3://$AWS_BUCKET/$BUILD_NAME/env.config.json
                  displayName: "Sync with AWS bucket"
                  env:
                    AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
                    AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
                    AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)
                    AWS_BUCKET: $(AWS_BUCKET_PRODUCTION)
